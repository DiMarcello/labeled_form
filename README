== LabeledForm

Automatic adds labels to each of your input fields and wraps them both in an paragraph.
Options added to each field helper are:
* <tt>:label</tt> - Defines the label text, if set to false produces no label. Defaults to human_attribute_name if model is set, else the humanized key.
* <tt>:label_position</tt> - Defines the label position, can be <tt>:before</tt> or <tt>:after</tt>. Defaults to <tt>:before</tt>.
* <tt>:wrap</tt> - Defines the wrap tag, false results in no wrap. Defaults to <tt>:p</tt>.

Also includes an fieldset_for method, which extends fields_for
with an fieldset tag and legend.
Besides default html options, 
* <tt>:legend</tt> - Defines the legend, if false produces no legend. Defaults to association name.
* <tt>:builder</tt> - Defines the builder to use. Defaults to the LabeledFormBuilder

== Example

	labeled_form_for object do |form|
		form.text_field :name
		form.text_area :body, :label => "Content"
		form.fieldset_for(:author, :class => "test") do |fs|
		  fs.text_field :username, :wrap => false
		end
		form.submit "Please save"
	end

Produces:
	<form ...>
	  <p>
	    <label title="Name" for="object_name">Name</label>
	    <input type="text" value="My Name" name="object[name]" id="object_name" />
	  </p>
	  <p>
	    <label title="Content" for="object_body">Content</label>
	    <textarea name="object[body]" id="object_body"></textarea>
	  </p>
	  <fieldset class="test">
	    <legend>Author</legend>
	    <label title="Username" for="object_author_username">Username</label>
	    <input type="text" value="user" name="object[author][username]" id="object_author_username" />
	  </fieldset>
	  <p>
	    <input type="submit" value="Please save" name="commit">
	  </p>
	</form>


Copyright (c) 2009 DiMarcello, released under the MIT license
